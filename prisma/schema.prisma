// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  premium       Boolean   @default(false)
  role          String    @default("user")
  banned        Boolean   @default(false)
  banReason     String?
  banExpires    Int? /// Unix timestamp for ban expiration
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  voter         Voter[]
  coordinator   Coordinator[]
  barangay      Barangay[]
  municipality  Municipality[]
  ayuda         Ayuda[]
  ayuda_table   Ayuda_table[]
}

model Session {
  id             String   @id @default(cuid()) @map("_id")
  userId         String
  token          String
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}



model Coordinator {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  fname                 String
  lname                 String
  phone                 String
  prkname               String
  position              String
  barId                 String
  munId                 String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  bar                   Barangay @relation(fields: [barId], references: [id])
  municipality          Municipality @relation(fields: [munId], references: [id])
  voter                 Voter[]
  ayuda                 Ayuda[]
}


model Voter {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  coorId                String?
  barId                 String
  munId                 String
  fname                 String
  lname                 String
  mname                 String
  phone                 String?
  prkname               String
  member                String
  remarks               String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  bar                   Barangay @relation(fields: [barId], references: [id])
  municipality          Municipality @relation(fields: [munId], references: [id])
  coor                  Coordinator? @relation(fields: [coorId], references: [id])
  ayuda_table           Ayuda_table[]
}


model Municipality {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  munname               String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  voter                 Voter[]
  coordinator           Coordinator[]
  barangay              Barangay[]
  ayuda                 Ayuda[]
  user                  User @relation(fields: [userId], references: [id])
}

model Barangay {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  munId                 String
  barname               String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  voter                 Voter[]
  coordinator           Coordinator[] 
  ayuda                 Ayuda[]
  municipality          Municipality @relation(fields: [munId], references: [id])
  user                  User @relation(fields: [userId], references: [id])


}




model Ayuda {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  ayuda_name            String
  ayuda_code            String
  ayuda_type            String
  ayuda_purpose         String
  barId                 String
  munId                 String
  coorId                String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  bar                   Barangay @relation(fields: [barId], references: [id])
  municipality          Municipality @relation(fields: [munId], references: [id])
  coordinator           Coordinator @relation(fields: [coorId], references: [id])
  ayuda_table           Ayuda_table[]
}

model Ayuda_table {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  ayudaId               String
  voterId               String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  voter                 Voter @relation(fields: [voterId], references: [id])
  ayuda                 Ayuda @relation(fields: [ayudaId], references: [id])
}

